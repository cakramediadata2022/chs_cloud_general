{
  // Place your chs_cloud_backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "generate input data code gin": {
    "prefix": "dInput",
    "body": [
      "	type DataInputStruct struct {",
      "		Date time.Time `binding:\"required\"`",
      "	}",
      "	var DataInput DataInputStruct",
      "	err := c.BindQuery(&DataInput)",
      "	if err != nil {",
      "		//fmt.Println(err.Error())",
      "		errMsg := General.GenerateValidateErrorMsg(c, err)",
      "		MasterData.SendResponse(GlobalVar.ResponseCode.InvalidDataFormat, errMsg, nil, c)",
      "		return",
      "	}"
    ],
    "description": "generate input data code gin"
  },
  "ginResponse": {
    "prefix": "gRes",
    "body": [
      "MasterData.SendResponse(GlobalVar.ResponseCode.Successfully, \"\", nil, c)"
    ],
    "description": "ginResponse"
  },
  "userLog": {
    "prefix": "userLog",
    "body": [
      "global_query.InsertLogUser(GlobalVar.SystemCode.Accounting, GlobalVar.LogUserActionCAS.UpdateAccountPayable, AuditDate, \"\", \"\", \"\", APARNumber, RefNumber, \"\", \"\", UserID)"
    ],
    "description": "userLog"
  },
  "pConfig": {
    "prefix": "pConfig",
    "body": [
      "",
      "// Get Program Configuration",
      "	val, exist := c.Get(\"pConfig\")",
      "	if !exist {",
      "		MasterData.SendResponse(GlobalVar.ResponseCode.DatabaseError, \"pConfig\", nil, c)",
      "		return",
      "	}",
      "	pConfig := val.(*config.CompanyDataConfiguration)",
      "	DB := pConfig.DB"
    ],
    "description": "pConfig"
  },
  "pConfigString": {
    "prefix": "pConfigString",
    "body": [
      "pConfig.Dataset.Configuration[GlobalVar.ConfigurationCategory.GlobalAccount][GlobalVar.ConfigurationName.AccountAPRefundDeposit].(string)"
    ],
    "description": "pConfigString"
  },
  "cDB": {
    "prefix": "cDB",
    "body": ["c *gin.Context, DB *gorm.DB"],
    "description": "cDB"
  },
  "cRefNumber": {
    "prefix": "cRefNumber",
    "body": [
      "",
      "	cache.DataCache.Set(c, c.GetString(\"UnitCode\"), GlobalVar.CacheKey.LastRefNumber+\"_\"+GlobalVar.JournalPrefix.AccountPayable, RefNumber, 0)"
    ],
    "description": "cRefNumber"
  },
  "gError": {
    "prefix": "gError",
    "body": [";err != nil {", "			return err", "		}"],
    "description": "gError"
  },
  "Logger": {
    "prefix": "gLog",
    "body": [
      "utils.LogResponseError(c, ctx, global_var.AppLogger, errors.Wrap(err, \"GenerateClientDatabaseP.Company\"))"
    ],
    "description": "Logger"
  },
  "spanTracer": {
    "prefix": "sTrace",
    "body": [
      "",
      "	ctx, span := global_var.Tracer.Start(utils.GetRequestCtx(c), \"\")",
      "	defer span.End()",
      ""
    ],
    "description": "spanTracer"
  }
}
